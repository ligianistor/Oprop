package testcases.cager.jexpr;

class TestRequire
{
	int val1, val2;
	TestRequire next1;
	
	void test0() {
		int j = 0;
		for (int i = 0; i < 0 && j > 2; i++) {
			i = 2;
		}
		// i = 3; this will give Error
	}

/*
	int test1(int val3)
	{
		while (val1 == 1 && val3 != (val1 + val2) ) {
			int a;
			val1 = 2;
			int b = a + val3;
			int b;
			a = val1 + val3;
		}
		
		return val1;
	}
	
		
	int test1 (int c) {
		v = test0(c);
		return test0(c);
	}
	
	
	predicate Range(int x, int y){
    	exists v,o,k . val -> v && next -> o 
    	&& v >= x && v <= y &&
    	[o#k Range(x,y) || o == null] 
    }
	
	predicate Range(int x, int y) =
    	exists int v, Link o, frac k:
    	val -> v && next -> o 
    	&& v >= x && v <= y &&
    	(o#k Range(x,y) || o == null)

	predicate Range(int x, int y) =
		exists int v: exists Link o: exists frac k: val -> v && next -> o 
    	&& v >= x && v <= y && (o == null)
    	
	int test0 (String a) {
		return a;
	}
	
	void voidtest () {
	}
	
	int test1 (int c) 
	requires c > 9 || c < 1
	ensures c < 10
	{
		test0();
		return voidtest();
	}
	
	int test2 (int a, int b) {
		if (a > b)
			return a;
		else 
			return b;
	}
	
	int test3 (int a, int b) 
	requires a > 3 && b < 2 {
		if (a > b)
			return a;
		else 
			return b;
	}
	
	int test4 (int a)
	ensures a < 3 {
		return a;
	}
	
	int test5 (int b)
	requires b < 2
	ensures b > 0 {
		return b - 1;
	}
*/
}
