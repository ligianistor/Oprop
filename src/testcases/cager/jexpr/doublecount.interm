Java Parser Version 1.1 (for Java1.2 code):  Reading from file DoubleCount.java...
before dump 0
CompilationUnits:
  CompilationUnit:
    ClassDeclaration: DoubleCount
      FieldDeclaration: int val
      FieldDeclaration: int dbl
      PredicateDeclaration: OK
        FormalParameters:
        QuantificationExpression: exists
          QuantifierVariables:
            QuantifierVariable: v type: int
            QuantifierVariable: d type: int
          BinaryExpression
            Operator &&
            BinaryExpression
              Operator &&
              BinaryExpression
                Operator ->
                PrimaryExpression (Type: )
                  FieldSelection (Type: )
                    ID=val
                PrimaryExpression (Type: )
                  Identifier: v
              BinaryExpression
                Operator ->
                PrimaryExpression (Type: )
                  FieldSelection (Type: )
                    ID=dbl
                PrimaryExpression (Type: )
                  Identifier: d
            BinaryExpression
              Operator ==
              PrimaryExpression (Type: )
                Identifier: d
              BinaryExpression
                Operator *
                PrimaryExpression (Type: )
                  Literal: 2 (Type: : int)
                PrimaryExpression (Type: )
                  Identifier: v
      MethodDeclaration: increment(void)
        FormalParameters:
        MethodSpecExpression: 
          MethodSpecVariables:
            MethodSpecVariable: k type: int
          ObjectProposition: 
            PrimaryExpression (Type: )
            PrimaryExpression (Type: )
              Identifier: k
            PrimaryExpression (Type: )
              Identifier: OK
              ArgumentList: 
          ObjectProposition: 
            PrimaryExpression (Type: )
            PrimaryExpression (Type: )
              Identifier: k
            PrimaryExpression (Type: )
              Identifier: OK
              ArgumentList: 
        Block
          StatementExpression
            BinaryExpression
              Operator =
              PrimaryExpression (Type: )
                Identifier: val
              BinaryExpression
                Operator +
                PrimaryExpression (Type: )
                  Identifier: val
                PrimaryExpression (Type: )
                  Literal: 1 (Type: : int)
          StatementExpression
            BinaryExpression
              Operator =
              PrimaryExpression (Type: )
                Identifier: dbl
              BinaryExpression
                Operator +
                PrimaryExpression (Type: )
                  Identifier: dbl
                PrimaryExpression (Type: )
                  Literal: 2 (Type: : int)
before visitor v
Evaluating type of Keyword this
Evaluating type of FieldSelection: val
FS name: val, type: int
PrimaryExpression cager.jexpr.ast.PrimaryExpression@fade06 is FS and type: int
Evaluating type of IdentifierExpression: v v
PrimaryExpression cager.jexpr.ast.PrimaryExpression@6846c type: int
Evaluating type of Binary cager.jexpr.ast.PrimaryExpression@fade06 cager.jexpr.ast.PrimaryExpression@6846c
Type Info is OperatorTypeInfo: result=boolean, cast1=null, cast2=null
Evaluating type of Keyword this
Evaluating type of FieldSelection: dbl
FS name: dbl, type: int
PrimaryExpression cager.jexpr.ast.PrimaryExpression@1dfeb30 is FS and type: int
Evaluating type of IdentifierExpression: d d
PrimaryExpression cager.jexpr.ast.PrimaryExpression@1c9b6eb type: int
Evaluating type of Binary cager.jexpr.ast.PrimaryExpression@1dfeb30 cager.jexpr.ast.PrimaryExpression@1c9b6eb
Type Info is OperatorTypeInfo: result=boolean, cast1=null, cast2=null
Evaluating type of Binary cager.jexpr.ast.BinaryExpression@817d6 cager.jexpr.ast.BinaryExpression@154fc43
boolean && boolean
Type Info is OperatorTypeInfo: result=boolean, cast1=null, cast2=null
Evaluating type of IdentifierExpression: d d
PrimaryExpression cager.jexpr.ast.PrimaryExpression@7dac02 type: int
PrimaryExpression cager.jexpr.ast.PrimaryExpression@a7d968 type: int
Evaluating type of IdentifierExpression: v v
PrimaryExpression cager.jexpr.ast.PrimaryExpression@1b2601c type: int
Evaluating type of Binary cager.jexpr.ast.PrimaryExpression@a7d968 cager.jexpr.ast.PrimaryExpression@1b2601c
Type Info is OperatorTypeInfo: result=int, cast1=null, cast2=null
Evaluating type of Binary cager.jexpr.ast.PrimaryExpression@7dac02 cager.jexpr.ast.BinaryExpression@1c3d029
Type Info is OperatorTypeInfo: result=boolean, cast1=null, cast2=null
Evaluating type of Binary cager.jexpr.ast.BinaryExpression@974e4b cager.jexpr.ast.BinaryExpression@1955dd4
boolean && boolean
Type Info is OperatorTypeInfo: result=boolean, cast1=null, cast2=null
Visiting Method increment
Evaluating type of Keyword this
PrimaryExpression cager.jexpr.ast.PrimaryExpression@14322ba type: DoubleCount
Evaluating type of IdentifierExpression: k k
PrimaryExpression cager.jexpr.ast.PrimaryExpression@9d04dc type: int
Evaluating type of IdentifierExpression: OK OK
PrimaryExpression cager.jexpr.ast.PrimaryExpression@aa2594 type: null
Setting type of Object Prop 
Evaluating type of Keyword this
PrimaryExpression cager.jexpr.ast.PrimaryExpression@892539 type: DoubleCount
Evaluating type of IdentifierExpression: k k
PrimaryExpression cager.jexpr.ast.PrimaryExpression@1eacdc4 type: int
Evaluating type of IdentifierExpression: OK OK
PrimaryExpression cager.jexpr.ast.PrimaryExpression@6b29e6 type: null
Setting type of Object Prop 
Evaluating type of IdentifierExpression: val val
PrimaryExpression cager.jexpr.ast.PrimaryExpression@18bea70 type: int
Evaluating type of IdentifierExpression: val val
PrimaryExpression cager.jexpr.ast.PrimaryExpression@cca07b type: int
PrimaryExpression cager.jexpr.ast.PrimaryExpression@3c0965 type: int
Evaluating type of Binary cager.jexpr.ast.PrimaryExpression@cca07b cager.jexpr.ast.PrimaryExpression@3c0965
AddTypeResolver: int + int
Type Info is OperatorTypeInfo: result=int, cast1=null, cast2=null
Evaluating type of Binary cager.jexpr.ast.PrimaryExpression@18bea70 cager.jexpr.ast.BinaryExpression@18cef0a
Type Info is OperatorTypeInfo: result=boolean, cast1=null, cast2=null
Evaluating type of IdentifierExpression: dbl dbl
PrimaryExpression cager.jexpr.ast.PrimaryExpression@1a18493 type: int
Evaluating type of IdentifierExpression: dbl dbl
PrimaryExpression cager.jexpr.ast.PrimaryExpression@106fbd7 type: int
PrimaryExpression cager.jexpr.ast.PrimaryExpression@17ff759 type: int
Evaluating type of Binary cager.jexpr.ast.PrimaryExpression@106fbd7 cager.jexpr.ast.PrimaryExpression@17ff759
AddTypeResolver: int + int
Type Info is OperatorTypeInfo: result=int, cast1=null, cast2=null
Evaluating type of Binary cager.jexpr.ast.PrimaryExpression@1a18493 cager.jexpr.ast.BinaryExpression@48074a
Type Info is OperatorTypeInfo: result=boolean, cast1=null, cast2=null
before second dump 0
CompilationUnits:
  CompilationUnit:
    ClassDeclaration: DoubleCount
      FieldDeclaration: int val
      FieldDeclaration: int dbl
      PredicateDeclaration: OK
        FormalParameters:
        QuantificationExpression: exists
          QuantifierVariables:
            QuantifierVariable: v type: int
            QuantifierVariable: d type: int
          BinaryExpression: boolean
            Operator &&
            BinaryExpression: boolean
              Operator &&
              BinaryExpression: boolean
                Operator ->
                PrimaryExpression (Type: int)
                  class cager.jexpr.ast.KeywordExpression [Type: DoubleCount]
                  FieldSelection (Type: int)
                    ID=val
                PrimaryExpression (Type: int)
                  Identifier: v
              BinaryExpression: boolean
                Operator ->
                PrimaryExpression (Type: int)
                  class cager.jexpr.ast.KeywordExpression [Type: DoubleCount]
                  FieldSelection (Type: int)
                    ID=dbl
                PrimaryExpression (Type: int)
                  Identifier: d
            BinaryExpression: boolean
              Operator ==
              PrimaryExpression (Type: int)
                Identifier: d
              BinaryExpression: int
                Operator *
                PrimaryExpression (Type: int)
                  Literal: 2 (Type: : int)
                PrimaryExpression (Type: int)
                  Identifier: v
      MethodDeclaration: increment(void)
        FormalParameters:
        MethodSpecExpression: 
          MethodSpecVariables:
            MethodSpecVariable: k type: int
          ObjectProposition: 
            PrimaryExpression (Type: DoubleCount)
              class cager.jexpr.ast.KeywordExpression [Type: DoubleCount]
            PrimaryExpression (Type: int)
              Identifier: k
            PrimaryExpression (Type: )
              Identifier: OK
              ArgumentList: 
          ObjectProposition: 
            PrimaryExpression (Type: DoubleCount)
              class cager.jexpr.ast.KeywordExpression [Type: DoubleCount]
            PrimaryExpression (Type: int)
              Identifier: k
            PrimaryExpression (Type: )
              Identifier: OK
              ArgumentList: 
        Block
          StatementExpression
            BinaryExpression: boolean
              Operator =
              PrimaryExpression (Type: int)
                Identifier: val
              BinaryExpression: int
                Operator +
                PrimaryExpression (Type: int)
                  Identifier: val
                PrimaryExpression (Type: int)
                  Literal: 1 (Type: : int)
          StatementExpression
            BinaryExpression: boolean
              Operator =
              PrimaryExpression (Type: int)
                Identifier: dbl
              BinaryExpression: int
                Operator +
                PrimaryExpression (Type: int)
                  Identifier: dbl
                PrimaryExpression (Type: int)
                  Literal: 2 (Type: : int)
