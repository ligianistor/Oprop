options {
  JAVA_UNICODE_ESCAPE = true;
  STATIC=false;
}

PARSER_BEGIN(JExpr)

package cager.jexpr;

import org.apache.bcel.generic.Type;

import cager.jexpr.ast.*;
import cager.jexpr.visitor.*;

import java.util.ArrayList;

/*
 * This file is a modified version of one originally found in the
 * JavaGrammars Examples directory of JavaCC2_1.
 *
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 */

/**
 * JExpr - a parser for a <I>very</I> small subset of Java.
 *
 * @author  Paul Cager.
 * @version 2
 */

public class JExpr
{
    public static void main(String [] args) throws Throwable {
        JExpr parser;
        String filename = null;
        String outputDirectory = null;
        long initTime = 0;
        long parseTime = 0;
        long startTime = 0;
        long stopTime = 0;

        if (args.length >= 2)
        {
			for (int i = 0; i < args.length - 1; i++)			{
			  	filename = args[i];
            	System.out.println("Java Parser Version 1.1 (for Java1.2 code):  Reading from file " + filename + " . . .");
            	try
            	{
                	startTime = System.currentTimeMillis();
                	parser = new JExpr(new java.io.FileInputStream(filename));
                	stopTime = System.currentTimeMillis();
                	initTime = stopTime - startTime;
            	} catch (java.io.FileNotFoundException e)
            	{
                	System.out.println("Java Parser Version 1.1 (for Java1.2 code):  File " + filename + " not found.");
                	return;
            	}			}

			CompilationUnits ast_top = new CompilationUnits();
			setParents(ast_top);
			
			for (int i = 0; i < args.length - 1; i++)
			{
				parser = new JExpr(new java.io.FileReader(args[i]));
            	CompilationUnit ast = parser.CompilationUnit();
            	ast_top.add(ast);
            	setParents(ast, ast_top);
          	}

            ast_top.dump(0);

            Visitor v = new ContextVisitor();
            ast_top.visit(v, null);
            ast_top.dump(0);

			//v = new CodeGenVisitor(args[1]);
            //ast.visit(v, null);
            
        }
        else
        {
            System.out.println("Java Parser Version 1.1 (for Java1.2 code):  Usage:");
            System.out.println("         java JExpr inputfile outputDirectory");
            return;
        }
    }

    static void setParents(CompilationUnits cus)
    {
        setParents(cus, null);
    }

    static void setParents(AST ast, AST parent)
    {
        ast.setParent(parent);

        AST[] children = ast.getChildren();
        for (int i = 0; i < children.length; i++)
            if (children[i] != null)
                setParents(children[i], ast);
    }

    static Number parseIntegerLiteral(Token t) throws ParseException
    {
        String s = t.image;
        int l = s.length();

        if (l == 0)
            throw new Error("Zero length integer literal");

        try
        {
            if (s.charAt(l - 1) == 'L' || s.charAt(l - 1) == 'l')
                return Long.decode(s.substring(0, l - 1));

            return Integer.decode(s);
        }
        catch (NumberFormatException nfe)
        {
            throw new ParseException(nfe.toString());
        }

    }

    static Number parseFPLiteral(Token t) throws ParseException
    {
        String s = t.image;
        int l = s.length();

        if (l == 0)
            throw new Error("Zero length FP literal");

        try
        {
            if (s.charAt(l - 1) == 'd' || s.charAt(l - 1) == 'D')
                return Double.valueOf(s.substring(0, l - 1));

            if (s.charAt(l - 1) == 'f' || s.charAt(l - 1) == 'F')
                return Float.valueOf(s.substring(0, l - 1));

            return Double.valueOf(s);
        }
        catch (NumberFormatException nfe)
        {
            throw new ParseException("Invalid FP Literal " + s);
        }

    }

    static String parseStringLiteral(Token t) throws ParseException
    {
        String s = t.image;
        int l = s.length();

        // TODO - need to process embedded "\" chars, such as
        // "ABC\"DEF"     or     "ABC\nDEF"??
        System.out.println("String Lit: <" + s.substring(1, l - 1) + "> len = " + s.substring(1, l - 1).length() );

        return s.substring(1, l - 1);
    }

    class NotImplementedException extends ParseException
    {
        NotImplementedException(String construct)
        {
            super("Construct Not Implemented in JExpr: " + construct);
        }

        NotImplementedException()
        {
            this(getToken(0).image);
        }
    }
}


PARSER_END(JExpr)


/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
| < STRICTFP: "strictfp" >
| < REQUIRES: "requires" >
| < ENSURES: "ensures" >
| < PREDICATE: "predicate" >
| < EXISTS: "exists" >
| < FORALL: "forall" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < KEYACCESS: "->" >
| < FRACTION: "#" >
| < IMPLIES: "~=>" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

/**
*   The <code>CompilationUnit</I> production is the top-level production.
*/
CompilationUnit CompilationUnit() :
{
    ClassDeclaration cd = null;
    String packageName = null;
}
{
  packageName = PackageDeclaration() { System.out.println("package: " + packageName); }
  cd = ClassDeclaration()
  <EOF>

  { return new CompilationUnit(packageName, cd); }
}

/**
*   A package declaration.
*   @return A string of the form "name1.name2...".
*/
String PackageDeclaration() :
{
    String name;
}
{
  "package" name = Name() ";"
    { return name; }
}

/** Not implemented. */
void ImportDeclaration() :
{}
{
  "import" Name() [ "." "*" ] ";"  { throw new NotImplementedException("import"); }
}

void TypeDeclaration() :
{}
{
  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" )* "class" )
  ClassDeclaration()
|
  InterfaceDeclaration()
|
  ";"
}


/*
 * Declaration syntax follows.
 */

ClassDeclaration ClassDeclaration() :
{
    ClassDeclaration cd = new ClassDeclaration();
    FieldDeclaration[] fds; //jhlee
    ConstructorDeclaration cond; //jhlee
    PredicateDeclaration pd; //jhlee
    MethodDeclaration md;
}
{
  "class" <IDENTIFIER> { cd.setIdentifier(new Identifier(getToken(0).image)); }
  "{"
  	(  	  LOOKAHEAD(3)
  		fds = FieldDeclarations()
  		{ for(int i = 0; i < fds.length; i++) { cd.addField(fds[i]); } }
  	  |
  	  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  		cond = ConstructorDeclaration() { cd.addConstructor(cond); }
 	  |
 	  	"predicate" pd = PredicateDeclaration() { cd.addPredicate(pd); }
 	  | 
  		md = MethodDeclaration() { cd.add(md); }
  	)+
  "}"

  { return cd; }
}

void UnmodifiedClassDeclaration() :
{}
{
  "class" <IDENTIFIER> [ "extends" Name() ] [ "implements" NameList() ]
  ClassBody()
}

void ClassBody() :
{}
{
  "{" ( ClassBodyDeclaration() )* "}"
}

void NestedClassDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  UnmodifiedClassDeclaration()
}

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclarations()
}

/** This production is to determine lookahead only. */
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp")*
  ResultType() <IDENTIFIER> "("
}

/** Not implemented. */
void InterfaceDeclaration() :
{}
{
  ( "abstract" | "public" | "strictfp")*
  UnmodifiedInterfaceDeclaration() { throw new NotImplementedException("interface"); }
}

void NestedInterfaceDeclaration() :
{}
{
  ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")*
  UnmodifiedInterfaceDeclaration()
}

void UnmodifiedInterfaceDeclaration() :
{}
{
  "interface" <IDENTIFIER> [ "extends" NameList() ]
  "{" ( InterfaceMemberDeclaration() )* "}"
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp")* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclarations()
}

/** Not implemented. 
void FieldDeclaration() :
{}
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  Type() VariableDeclarator() ( "," VariableDeclarator() )* ";" { throw new NotImplementedException("FieldDeclaration"); }
}
*/
/*
FieldDeclaration FieldDeclaration() : //jhlee
{
  Type type;
  String id;
}
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  type = Type()
  id = VariableDeclaratorId() ";"
  {
	return new FieldDeclaration(id, type);
  }
}
*/

FieldDeclaration[] FieldDeclarations() : //jhlee
{
  Type type;
  String id;
  ArrayList<FieldDeclaration> fields = new ArrayList<FieldDeclaration>();
}
{
  ( "public" | "protected" | "private" | "static" | "final" | "transient" | "volatile" )*
  type = Type() id = VariableDeclaratorId() { fields.add(new FieldDeclaration(id, type)); }
  ( "," id = VariableDeclaratorId() { fields.add(new FieldDeclaration(id, type)); } )* ";"
  {
	return (FieldDeclaration[])(fields.toArray(new FieldDeclaration[0]));
  }
}

void VariableDeclarator() :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

String VariableDeclaratorId() :
{
    String id;
}
{
  <IDENTIFIER> { id = getToken(0).image; } ( "[" "]" )*  { return id; }
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer() :
{}
{
  "{" [ VariableInitializer() ( LOOKAHEAD(2) "," VariableInitializer() )* ] [ "," ] "}"
}


QuantifierVariables QuantifierVariables() : //jhlee
{
    QuantifierVariables qvaris = new QuantifierVariables();
    QuantifierVariable p;
}
{
   p = QuantifierVariable() { qvaris.add(p); } ( "," p = QuantifierVariable() { qvaris.add(p); } )*

  { return qvaris; }
}

QuantifierVariable QuantifierVariable() : //jhlee
{
    Type t;
    String id;
}
{
  [ "final" { throw new NotImplementedException(); } ] t = Type() id = VariableDeclaratorId() { return new QuantifierVariable(id, t); }
}




PredicateDeclaration PredicateDeclaration() :
{
    PredicateDeclaration pd = new PredicateDeclaration();
    FormalParameters params;
    Identifier ider;
    Expression ex;
}
{
  <IDENTIFIER> { ider = new Identifier(getToken(0).image); }
  params = FormalParameters() "="
  ex = Expression()

  {
    pd.setIdentifier(ider);
    pd.setParameters(params);
    pd.setExpression(ex);
    
    return pd;
  }
}

MethodDeclaration MethodDeclaration() :
{
    MethodDeclaration md = new MethodDeclaration();
    Type resultType;
    FormalParameters params;
    Identifier ider;
    MethodSpecExpression mse = null;
    Block block;
}
{
  resultType = ResultType()
  <IDENTIFIER> { ider = new Identifier(getToken(0).image); }
  params = FormalParameters()
  mse = MethodSpecExpression()
  block = Block()

  {
    md.setType(resultType);
    md.setIdentifier(ider);
    md.setParameters(params);
    md.setMethodSpecExpression(mse);
    md.setBlock(block);

    return md;
  }
}

MethodSpecVariables MethodSpecVariables() : //jhlee
{
    MethodSpecVariables params = new MethodSpecVariables();
    MethodSpecVariable p;
}
{
  [ p = MethodSpecVariable() { params.add(p); } ( "," p = MethodSpecVariable() { params.add(p); } )* ":" ] 

  { return params; }
}

MethodSpecVariable MethodSpecVariable() : //jhlee
{
    Type t;
    String id;
}
{
  [ "final" { throw new NotImplementedException(); } ] t = Type() id = VariableDeclaratorId() { return new MethodSpecVariable(id, t); }
}

MethodSpecExpression MethodSpecExpression() : //jhlee
{
  MethodSpecExpression msexp = new MethodSpecExpression();
  MethodSpecVariables msvs = null;
  Expression precond = null;
  Expression postcond = null;
}
{
  msvs = MethodSpecVariables()
  [ "requires" precond = Expression() ]
  [ "ensures" postcond = Expression() ]
  {
    msexp.setMethodSpecVariables(msvs);
    msexp.setPrecondition(precond);
    msexp.setPostcondition(postcond);
    return msexp;
  }
}


FormalParameters FormalParameters() :
{
    FormalParameters params = new FormalParameters();
    FormalParameter p;
}
{
  "(" [ p = FormalParameter() { params.add(p); } ( "," p = FormalParameter() { params.add(p); } )* ] ")"

  { return params; }
}

FormalParameter FormalParameter() :
{
    Type t;
    String id;
}
{
  [ "final" { throw new NotImplementedException(); } ] t = Type() id = VariableDeclaratorId() { return new FormalParameter(id, t); }
}

/** Not implemented. 
void ConstructorDeclaration() :
{}
{
  [ "public" | "protected" | "private" ]
  <IDENTIFIER> FormalParameters() [ "throws" NameList() ]
  "{"
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  "}" { throw new NotImplementedException("Constructor"); }
}*/


ConstructorDeclaration ConstructorDeclaration() : //jhlee
{
	ConstructorDeclaration cond = new ConstructorDeclaration();
	FormalParameters params;
    Identifier ider;
    Block block;
}
{
  [ "public" | "protected" | "private" ]
  <IDENTIFIER> { ider = new Identifier(getToken(0).image); }
  params = FormalParameters() [ "throws" NameList() ]
  block = Block()
  {
    cond.setIdentifier(ider);
    cond.setParameters(params);
    cond.setBlock(block);
    return cond;
  }
}

/** Not implemented. */
void ExplicitConstructorInvocation() :
{}
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [ LOOKAHEAD(2) PrimaryExpression() "." ] "super" Arguments() ";"
}

/** Not implemented. */
void Initializer() :
{}
{
  [ "static" ] Block() { throw new NotImplementedException("Initializer"); }
}


/*
 * Type, name and expression syntax follows.
 */

/**
*   Parse a "Type", which may be a primitive Type, a class name or an array (arrays not implemented).
*/
Type Type() :
{
    Type t = null;
}
{
  ( t = PrimitiveType() | t = TypeName() ) ( "[" "]" )*

  { return t; }
}

Type TypeName() :
{
    Type t;
    StringBuffer sb;
}
{
    <IDENTIFIER> { sb = new StringBuffer(getToken(0).image); } ( LOOKAHEAD(1) "." <IDENTIFIER> { sb.append('.'); sb.append(getToken(0).image); } ) *

    {
        return Types.getType(sb.toString());
    }
}

Type PrimitiveType() :
{}
{
(  "boolean"
|
  "char"
|
  "byte"
|
  "short"
|
  "int"
|
  "long"
|
  "float"
|
  "double"
)
    { return Types.getType(getToken(0).image); }
}

/**
*   A ResultType is either "void" or a Type.
*/
Type ResultType() :
{
    Type t;
}
{
  "void"        { return Types.getType("void"); }
|
  t = Type()    { return t; }
}

/**
*   Parse a (qualified) <I>Name</I> such as a.b.c
*/
String Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
    StringBuffer sb;
}
{
  <IDENTIFIER>  { sb = new StringBuffer(getToken(0).image); }
  ( LOOKAHEAD(2) "." <IDENTIFIER>   { sb.append('.'); sb.append(getToken(0).image); }
  )*

  { return sb.toString(); }
}


void NameList() :
{}
{
  Name()
  ( "," Name()
  )*
}


/*
 * Expression syntax follows.
 */

/**
*   Parse an expression returning an AST representing that expression.
*/


Expression Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{
    Expression e = null;
    String op = null;
    Expression e2 = null;
    QuantifierVariables qvs = null;
}
{
  (
  	LOOKAHEAD(3)
  		( "exists" | "forall" ) { op = getToken(0).image; } qvs = QuantifierVariables() ":" e2 = Expression()  		{ e = new QuantificationExpression(op, qvs, e2); }
  	|
    	e = ObjectProposition()
  		[ op = AssignmentOperator() e2 = Expression() { e = new BinaryExpression(e, op, e2); } ]
  		
  )
  {return e;}
}

String AssignmentOperator() :
{
	String op = null;
}
{
  ( "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "<<=" | ">>=" | ">>>=" | "&=" | "^=" | "|=" )  { op = getToken(0).image; return op; }
}

Expression ObjectProposition() :
{
    Expression e = null;
    Expression frac = null;
	Expression pd;
}
{
  e = ConditionalExpression() [ "#" frac = ConditionalExpression() pd = ConditionalExpression()
  								{ e = new ObjectProposition(e, frac, pd); } ]
  { return e; }
}

Expression ConditionalExpression() :
{
    Expression e = null;
}
{
  e = ConditionalOrExpression() [ "?" Expression() ":" ConditionalExpression() ]

  { return e; }
}

Expression ConditionalOrExpression() :
{
    Expression e = null;
    Expression rhs = null;
}
{
  e = ConditionalAndExpression()
  (
      "||" rhs = ConditionalAndExpression()

      {  e = new BinaryExpression(e, "||", rhs); }
  )*

  { return e; }
}

Expression ConditionalAndExpression() :
{
    Expression e = null;
    Expression rhs = null;
}
{
  e = InclusiveOrExpression() ( "&&" rhs = InclusiveOrExpression() {  e = new BinaryExpression(e, "&&", rhs); } )*

  { return e; }
}

Expression InclusiveOrExpression() :
{
    Expression e = null;
    Expression rhs = null;
}
{
  e = ExclusiveOrExpression() ( "|" rhs = ExclusiveOrExpression() {  e = new BinaryExpression(e, "|", rhs); } )*

  { return e; }
}

Expression ExclusiveOrExpression() :
{
    Expression e = null;
    Expression rhs = null;
}
{
  e = AndExpression() ( "^" rhs = AndExpression() {  e = new BinaryExpression(e, "^", rhs); } )*

  { return e; }
}

Expression AndExpression() :
{
    Expression e = null;
    Expression rhs = null;
}
{
  e = EqualityExpression() ( "&" rhs = EqualityExpression() {  e = new BinaryExpression(e, "&", rhs); } )*

  { return e; }
}

Expression EqualityExpression() :
{
    Expression e = null;
    Expression rhs = null;
    String op = null;
}
{
  e = InstanceOfExpression() ( ( "==" | "!=" ) { op = getToken(0).image; } rhs = InstanceOfExpression() {  e = new BinaryExpression(e, op, rhs); } )*

  { return e; }
}

Expression InstanceOfExpression() :
{
    Expression e = null;
}
{
  e = RelationalExpression() [ "instanceof" Type() {  e = new BinaryExpression(e, "instanceof", null); } ]  // TODO 

  { return e; }
}

//This also include Key Access Expression "->"
Expression RelationalExpression() :
{
    Expression e = null;
    Expression rhs = null;
    String op = null;
}
{
  e = ShiftExpression() ( ( "<" | ">" | "<=" | ">=" | "->" ) { op = getToken(0).image; } rhs = ShiftExpression() {  e = new BinaryExpression(e, op, rhs); } )*

  { return e; }
}

Expression ShiftExpression() :
{
    Expression e = null;
    Expression rhs = null;
    String op = null;
}
{
  e = AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) { op = getToken(0).image; } rhs = AdditiveExpression() {  e = new BinaryExpression(e, op, rhs); } )*

  { return e; }
}

Expression AdditiveExpression() :
{
    Expression e = null;
    Expression rhs = null;
    String op = null;
}
{
  e = MultiplicativeExpression() ( ( "+" | "-" ) { op = getToken(0).image; } rhs = MultiplicativeExpression() {  e = new BinaryExpression(e, op, rhs); } )*

  { return e; }
}

Expression MultiplicativeExpression() :
{
    Expression e = null;
    Expression rhs = null;
    String op = null;
}
{
  e = UnaryExpression() ( ( "*" | "/" | "%" ) { op = getToken(0).image; } rhs = UnaryExpression() {  e = new BinaryExpression(e, op, rhs); } )*

  { return e; }
}

Expression UnaryExpression() :
{
    Expression e = null;
    String op = null;
}
{
(
  ( "+" | "-" ) { op = getToken(0).image; } e = UnaryExpression() { e = new UnaryExpression(e, op, false); }
|
  e = PreIncrementExpression()
|
  e = PreDecrementExpression()
|
  e = UnaryExpressionNotPlusMinus()
)
  { return e; }
}

Expression PreIncrementExpression() :
{
    Expression e = null;
}
{
  "++" e = PrimaryExpression() { e = new UnaryExpression(e, "++", false); }

  { return e; }
}

Expression PreDecrementExpression() :
{
    Expression e = null;
}
{
  "--" e = PrimaryExpression() { e = new UnaryExpression(e, "--", false); }

  { return e; }
}

Expression UnaryExpressionNotPlusMinus() :
{
    Expression e = null;
    String op = null;
}
{
(
  ( "~" | "!" ) { op = getToken(0).image; } e = UnaryExpression() { e = new UnaryExpression(e, op, false); }
|
  LOOKAHEAD( CastLookahead() )
  e = CastExpression()
|
  e = PostfixExpression()
)
  { return e; }
}


// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )

}

Expression PostfixExpression() :
{
    Expression e = null;
}
{
  e = PrimaryExpression() [ "++" { e = new UnaryExpression(e, "++", true); } | "--" { e = new UnaryExpression(e, "--", true); } ]

  { return e; }
}

Expression CastExpression() :
{
    Expression e = null;
    Type t = null;
}
{
(
  LOOKAHEAD("(" PrimitiveType())
  "(" t = Type() ")" e = UnaryExpression()
|
  "(" t = Type() ")" e = UnaryExpressionNotPlusMinus()
)
  { return new CastExpression(t, e); }
}

Expression PrimaryExpression() :
{
    PrimaryExpression e = new PrimaryExpression();
}
{
  PrimaryPrefix(e) ( LOOKAHEAD(2) PrimarySuffix(e) )*

  { return e; }
}

void PrimaryPrefix(PrimaryExpression pe) :
{
    Expression e = null;
}
{
(  e = Literal()        { System.out.println("Added literal to pe: " + e); pe.add(e); }
|
 ///////////////////////need to fix!///////////////////////////////////////////////////////////////////////////////
  "this" { pe.add(new KeywordExpression("this", null)); } //{ throw new NotImplementedException(); }
|
  "super" "." <IDENTIFIER>  { throw new ParseException("\"super\" not supprted"); }
|
  "(" e = Expression() ")"  { pe.add(e); }
|
  e = AllocationExpression() { pe.add(e); }
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"  { throw new ParseException("Not done ResultType().class"); }
|
  ( <IDENTIFIER> { e = new IdentifierExpression(getToken(0).image); { pe.add(e);} }
  	(LOOKAHEAD(1) "." <IDENTIFIER> {  e = new FieldSelection(new Identifier(getToken(0).image)); { pe.add(e);} } )* )
  	
)
}


void PrimarySuffix(PrimaryExpression pe) :
{
    Expression e;
    ArgumentList el;
}
{
(
  LOOKAHEAD(2)
  "." "this"
|
  LOOKAHEAD(2)
  "." AllocationExpression()
|
  "[" Expression() "]"
|
  "." <IDENTIFIER>   {  e = new FieldSelection(new Identifier(getToken(0).image)); { pe.add(e);} }
  //"." <IDENTIFIER>   {  e = new FieldSelection(new IdentifierExpression(getToken(0).image)); { pe.add(e);} }
|
  el = Arguments()   { pe.add(el); /* jhlee */ }
)
}



Expression Literal() :
{
    Expression e = null;
}
{
  <INTEGER_LITERAL>         { return new LiteralExpression(parseIntegerLiteral(getToken(0))); }
|
  <FLOATING_POINT_LITERAL>  { return new LiteralExpression(parseFPLiteral(getToken(0))); }
|
  <CHARACTER_LITERAL>       { return new LiteralExpression(new Character(getToken(0).image.charAt(1))); }    // TODO - handle \ constructs etc.
|
  <STRING_LITERAL>          { return new LiteralExpression(parseStringLiteral(getToken(0))); }    // TODO - remove ", expand \nnn
|
  e = BooleanLiteral()      { return e; }
|
  e = NullLiteral()         { return e; }

}

Expression BooleanLiteral() :
{}
{
  "true"        { return new LiteralExpression(Boolean.TRUE); }
|
  "false"       { return new LiteralExpression(Boolean.FALSE); }
}

Expression NullLiteral() :
{}
{
  "null" { return new KeywordExpression(null, Types.getType("Object")); }
}

ArgumentList Arguments() :
{
    ArgumentList al = new ArgumentList();
    Expression a;
}
{
  "(" [ a = Expression() { al.add(a); } ( "," a = Expression() { al.add(a); } )* ] ")"

  { return al; }
}

Expression AllocationExpression() :
{  
    String n = null;
    Expression e = null;        // TODO
}
{
(
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
|
  "new" n = Name()
    (
      ArrayDimsAndInits()
    |
      e = Arguments() { return new AllocationExpression(n, e); } //[ ClassBody() ]
    )
)

    { throw new NotImplementedException("new"); }
}

/*
 * The second LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{}
{
  LOOKAHEAD(2)
  ( LOOKAHEAD(2) "[" Expression() "]" )+ ( LOOKAHEAD(2) "[" "]" )*
|
  ( "[" "]" )+ ArrayInitializer()
}


/*
 * Statement syntax follows.
 */

Statement Statement() :
{
    Statement s = null;
}
{
 (LOOKAHEAD(2)
  LabeledStatement()
|
  s = Block()
|
  EmptyStatement()
|
  s = StatementExpression() ";"
|
  SwitchStatement()
|
  s = IfStatement()
|
  s = WhileStatement()
|
  DoStatement()
|
  s = ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  s = ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
)

 { return s; }
}


void LabeledStatement() :
{}
{
  <IDENTIFIER> ":" Statement()
}

Block Block() :
{
    Block b = new Block();
    Statement s;
}
{
  "{" ( s = BlockStatement() { b.add(s); } )* "}"

  { return b; }
}

Statement BlockStatement() :
{
    Statement s = null;
    LocalVariableDeclaration lv;
    String op = null;
    Expression E = null;
}
{
 (LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  lv = LocalVariableDeclaration() [ op = AssignmentOperator() E = Expression() ]
  { s = new DeclarationStatement(lv, op, E); }  ";"
|
  s = Statement()
|
  UnmodifiedClassDeclaration()
|
  UnmodifiedInterfaceDeclaration()
 )

 { return s; }
}

/*
void LocalVariableDeclaration() :
{}
{
  [ "final" ] Type() VariableDeclarator() ( "," VariableDeclarator() )*
}
*/

LocalVariableDeclaration LocalVariableDeclaration() : //jhlee
{
  Type type;
  String id;
}
{
  [ "final" ]
  type = Type() id = VariableDeclaratorId()
  {
	return new LocalVariableDeclaration(id, type);
  }
}

void EmptyStatement() :
{}
{
  ";"
}

Statement StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{
  Expression e;
  String op = null;
  Expression e2 = null;
}
{(
  e = PreIncrementExpression()
|
  e = PreDecrementExpression()
|
  e = PrimaryExpression()
  [
    "++" { e = new UnaryExpression(e, "++", true); }
  |
    "--" { e = new UnaryExpression(e, "--", true); }
  |
    //AssignmentOperator() Expression()
    op = AssignmentOperator() e2 = Expression() { e = new BinaryExpression(e, op, e2); }
  ]
) 
  { return new StatementExpression(e); }
}

void SwitchStatement() :
{}
{
  "switch" "(" Expression() ")" "{"
    ( SwitchLabel() ( BlockStatement() )* )*
  "}"
}

void SwitchLabel() :
{}
{
  "case" Expression() ":"
|
  "default" ":"
}

IfStatement IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
    IfStatement s;
    Expression e;
    Statement thenClause;
    Statement elseClause = null;
}
{
  "if" "(" e = Expression() ")" thenClause = Statement() [ LOOKAHEAD(1) "else" elseClause = Statement() ]

  {
      s = new IfStatement();
      s.setExpression(e);
      s.setThenClause(thenClause);
      s.setElseClause(elseClause);

      return s;
  }
}

WhileStatement WhileStatement() : //jhlee
{
    WhileStatement s;
    Expression e;
    Statement doClause;
}
{
  "while" "(" e = Expression() ")" doClause = Statement()
  {
      s = new WhileStatement();
      s.setExpression(e);
      s.setDoClause(doClause);

      return s;
  }
}

void DoStatement() :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

ForStatement ForStatement() :
{
  Statement s1 = null, s2 = null, s3 = null;
  Expression exp = null;
}
{
  "for" "(" [ s1 = ForInit() ] ";" [ exp = Expression() ] ";" [ s2 = ForUpdate() ] ")"
  s3 = Statement()
  {
    return new ForStatement(s1, exp, s2, s3);  }
}

/*
void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}
*/
Statement ForInit() : //jhlee
{
  Statement s = null;
  LocalVariableDeclaration lv = null;
  String op = null;
  Expression exp = null;  
}
{
  (    LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  	lv = LocalVariableDeclaration() op = AssignmentOperator() exp = Expression()
  	{ s = new DeclarationStatement(lv, op, exp); }
  |
  	s = StatementExpression()
  )
  {
    return s;  }
}

void StatementExpressionList() :
{}
{
  StatementExpression() ( "," StatementExpression() )*
}
/*
void ForUpdate() :
{}
{
  StatementExpressionList()
}
*/
Statement ForUpdate() :
{
  Statement s;
}
{
  s = StatementExpression()
  {
    return s;  }
}

void BreakStatement() :
{}
{
  "break" [ <IDENTIFIER> ] ";"
}

void ContinueStatement() :
{}
{
  "continue" [ <IDENTIFIER> ] ";"
}

ReturnStatement ReturnStatement() :
{
    ReturnStatement s = null;
    Expression e = null;
}
{
  "return" [ e = Expression() ] ";"  { s = new ReturnStatement(e); return s; }
}

void ThrowStatement() :
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement() :
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block()
  ( "catch" "(" FormalParameter() ")" Block() )*
  [ "finally" Block() ]
}

/*
AssignStatement AssignStatement() : //jhlee
{
	AssignStatement as = new AssignStatement();
	Identifier ider = null;
	Expression e;
}
{
	<IDENTIFIER> { ider = new Identifier(getToken(0).image); }
	"="
	e = Expression()
	";"
	{
	  as.setIdentifier(ider);
	  as.setExpression(e);
	  return as;
	}
}
*/