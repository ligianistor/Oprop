package cager.jexpr.test;

class Temp
{
	int testInt(java.lang.Object obj, java.lang.String str)
	{
		return 1;
	}

	int testInt2(java.lang.Object obj, java.lang.String str)
	{
		//return obj.XXX.YYY.toString();
		return 1 + 2;
	}

	java.lang.String stringFunc(java.lang.String x)
	{
		return x;
	}
	
	java.lang.String stringFunc2(java.lang.String x)
	{
		return x + "Hello";
	}
	
	java.util.Vector nullVector()
	{
		return null;
	}

	java.util.Vector someVector(java.util.Vector v)
	{
		return v;
	}
	
	java.lang.String stringConcat1(java.lang.Object obj1)
	{
		return obj1 + ">";
	}

	java.lang.String stringConcat2(java.lang.Object obj1, java.lang.Object obj2)
	{
		return obj1 + " : " + obj2;
	}
	
	java.lang.String stringCast(Object obj)
	{
		return (String)obj;
	}
	
	int testIf(int p1, int p2)
	{
		if (p1 > p2)
			return p1;
		else
			return p2;
	}
	
	char testChar(char c, int i)
	{
		return (char)(c + i);
	}
	
	long implicitWiden(short x)
	{
		return x;
	}
	
}

/*
(java.lang.String x) = (x + "Hello")
(int param1, int param2) = (param1 == param2)
(int param1, long param2) = (param1 > param2)
(short param1, byte param2) = (param1 > param2)
(int param1, int param2) = (param1 == 5 || param1 == param2)

(boolean p) = (!p)

(int param1, int param2) = (1 + 2 + 12)
(int param1, long param2) = (param1 + param2 + 1)
(int param1) = ("String1" + "String\"2")

12 + 2
true || false
12 + 5 * 2 | 17 + -2
16++ + 4
Thing.a.b + 12 * 2
java.lang.Object + java.util.Vector
someid + someother
*/